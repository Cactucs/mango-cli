#!/usr/bin/env node
var checkError = require('../lib/helpers/checkerror')
var Config = require('../lib/helpers/config')
var log = require('better-console')
var Mango = require('../lib/mango')
var path = require('path')
var pkg = require('../package.json')
var program = require('commander')
var runcmd = require('../lib/helpers/runcmd')
var unique = require('../lib/helpers/unique')

var noop = function() {}

program
	.version(pkg.version)

program
	.command('init [directory]')
	.description('initialize a new project')
	.option('-s, --source [git_repository]', 'Template repository to fork. Defaults to ' + pkg.config.default_fork_repo)
	.action(function init(directory, options) {
		var dir = path.resolve(process.cwd(), directory || '.')
		var mango = new Mango(dir)
		var source = options.source || pkg.config.default_fork_repo
		log.time('~ initialization time')

		mango.init(source, function(err) {
			log.timeEnd('~ initialization time')
			checkError(err)

			var config = new Config(dir).get()
			if(config.hooks && config.hooks.init) {
				log.info('~ init hook: ' + config.hooks.init)
				runcmd(config.hooks.init, dir)
			}
			log.info('/>')
		})
	})

program
	.command('install [packages...]')
	.alias('i')
	.description('NPM install of passed packages or dependencies specified in config')
	.action(function install(packages) {
		log.time('~ installation time')
		var dir = process.cwd()
		var config = new Config()
		var config_value = config.get()

		var onFinish = function() {
			log.timeEnd('~ installation time')
			if(config_value.hooks && config_value.hooks.install) {
				log.info('~ install hook: ' + config_value.hooks.install)
				runcmd(config_value.hooks.install)
			}
			log.info('/>')
		}

		// Install only passed packages and update mango.json
		if(packages.length > 0) {
			var _config = { dependencies: packages }
			var mango = new Mango(dir, _config)

			mango.install(function(err) {
				checkError(err)
				if(!config_value.dependencies) config_value.dependencies = []
				config_value.dependencies = unique(config_value.dependencies.concat(packages))
				config.save(config_value)
				onFinish()
			})
		}
		// Install packages specifies in mango.json
		else {
			var mango = new Mango(dir, config_value)
			mango.install(function(err) {
				checkError(err)
				onFinish()
			})
		}

	})

program
	.command('build [tasks...]')
	.alias('b')
	.description('build project assets for production')
	.action(function build(tasks) {
		var config = new Config().get()
		var mango = new Mango(process.cwd(), config)
		log.time('~ compilation time')

		mango.build(tasks, function(err) {
			log.timeEnd('~ compilation time')
			checkError(err)
			if(config.hooks && config.hooks.build) {
				log.info('~ build hook: ' + config.hooks.build)
				runcmd(config.hooks.build)
			}
			log.info('/>')
		})
	})

program
	.command('dev')
	.alias('d')
	.description('start a development mode and watch for assets change')
	.option('-p, --proxy [http_proxy]', 'Proxy to a server instead of starting buildin')
	.action(function (options) {
		var config = new Config().get()
		var mango = new Mango(process.cwd(), config)

		mango.dev(options.proxy, function(err) {
			checkError(err)
			if(config.hooks && config.hooks.dev) {
				log.info('~ dev hook: ' + config.hooks.dev)
				runcmd(config.hooks.dev)
			}
			log.info('/>')
		})
	})

program.parse(process.argv)

if(program.args.length === 0) {
	program.help()
}
