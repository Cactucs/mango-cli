#!/usr/bin/env node
var Mango = require('../lib/mango')
var path = require('path')
var pkg = require('../package.json')
var program = require('commander')
var jf = require('jsonfile')
var log = require('better-console')

var CONFIG_PATH = path.resolve(process.cwd(), 'mango.json')
var CONFIG_LOCAL_PATH = path.resolve(process.cwd(), 'mango.local.json')

var config_defaults = {
	"src_folder": ".",
	"dist_folder": "dist",
	"styles": null,
	"scripts": null,
	"images": null,
	"static": null,
	"templates": null,
	"dependencies": null,
	"watch": null
}

var getConfig = function() {
	var k
	var config = {}
	var config_main
	var config_local

	try {
		config_main = jf.readFileSync(CONFIG_PATH, { throws: true })
		config_local = jf.readFileSync(CONFIG_LOCAL_PATH, { throws: false })
	} catch(e){
		log.error('Config file in invalid format: ', e.message)
	}

	if(!config_main){
		log.error('Cannot load the config file mango.json')
		process.exit(1)
	}

	if(config_defaults) {
		for(k in config_defaults) {
			config[k] = config_defaults[k]
		}
	}

	if(config_main) {
		for(k in config_main) {
			config[k] = config_main[k]
		}
	}

	if(config_local) {
		for(k in config_local) {
			config[k] = config_local[k]
		}
	}
	return config
}
var saveConfig = function (config) {
	jf.writeFile(CONFIG_PATH, config, function (err) {
		if(err) log.error(err)
	})
}

var noop = function() {}

program
	.version(pkg.version)

program
	.command('init [directory]')
	.description('initialize a new project')
	.option('-s, --source [git_repository]', 'Template repository to fork. Defaults to ' + pkg.config.default_fork_repo)
	.action(function init(directory, options) {
		var mango = new Mango(path.resolve(process.cwd(), directory || '.'), {})
		var source = options.source || pkg.config.default_fork_repo
		log.time('~ initialization time')
		mango.init(source, function() {
			log.timeEnd('~ initialization time')
			log.info('/>')
		})
	})

program
	.command('install [packages...]')
	.alias('i')
	.description('NPM install of passed packages and dependencies specified in config')
	.action(function install(packages) {
		var config = getConfig()
		if(packages) {
			if(!config.dependencies) config.dependencies = []
			config.dependencies = config.dependencies.concat(packages)
			saveConfig(config)
		}
		var mango = new Mango(process.cwd(), config)
		log.time('~ installation time')
		mango.install(function() {
			log.timeEnd('~ installation time')
			log.info('/>')
		})
	})

program
	.command('build [tasks...]')
	.description('build project assets for production')
	.action(function build(tasks) {
		var mango = new Mango(process.cwd(), getConfig())
		log.time('~ compilation time')
		mango.build(tasks, function() {
			log.timeEnd('~ compilation time')
			log.info('/>')
		})
	})

program
	.command('dev')
	.description('start a development mode and watch for assets change')
	.option('-p, --proxy [http_proxy]', 'Proxy to a server instead of starting buildin')
	.action(function (options) {
		var mango = new Mango(process.cwd(), getConfig())
		mango.dev(options.proxy, function() {
			log.info('/>')
		})
	})

program.parse(process.argv)

if(program.args.length === 0) {
	program.help()
}
