#!/usr/bin/env node
var Mango = require('../lib/mango')
var path = require('path')
var pkg = require('../package.json')
var program = require('commander')


var getMangoConfig = function() {
	return require(path.resolve(process.cwd(), '.mango'))
}

program
	.version(pkg.version)

program
	.command('init [directory]')
	.description('initialize a new project')
	.option('-s, --source [git_repository]', 'Template repository to fork. Defaults to ' + pkg.config.default_fork_repo)
	.action(function init(directory, options) {
		var mango = new Mango()
		var dir = path.resolve(process.cwd(), directory || '.')
		var source = options.source || pkg.config.default_fork_repo
		mango.init(dir, null, source)
	})

program
	.command('install [packages...]')
	.alias('i')
	.description('NPM install of passed packages and dependencies specified in .mango')
	.action(function install(packages) {
		var mango = new Mango()
		var dir = process.cwd()
		var config = getMangoConfig()
		mango.install(dir, config, packages)
	})

program
	.command('build [tasks...]')
	.description('build project assets for production')
	.action(function build(tasks) {
		var mango = new Mango()
		var dir = process.cwd()
		var config = getMangoConfig()
		mango.build(dir, config, tasks)
	})

program
	.command('dev')
	.description('start a development mode and watch for assets change')
	.option('-p, --proxy [http_proxy]', 'Proxy to a server instead of starting buildin')
	.action(function (options) {
		var mango = new Mango()
		var dir = process.cwd()
		var config = getMangoConfig()
		mango.dev(dir, config, options.http_proxy)
	})

program.parse(process.argv)
